var array: Int[16];
var aux: Int[16];

for (var i: Int = 0; i < 16; i = i + 1)
{
    array[i] = 15 - i;
}

fun merge(array: Ref<Int[1]>, aux: Ref<Int[1]>, bounds: Int[3]): Nothing
{
    print("Merge s = ", bounds[0], ", m = ", bounds[1], ", e = ", bounds[2], "\n");

    if (bounds[2] - bounds[0] > 2)
    {
        var _bounds: Int[3];
        _bounds[0] = bounds[0];
        _bounds[1] = (bounds[0] + bounds[1]) / 2;
        _bounds[2] = bounds[1];
        merge(array, aux, _bounds);
        
        _bounds[0] = bounds[1];
        _bounds[1] = (bounds[1] + bounds[2]) / 2;
        _bounds[2] = bounds[2];
        merge(array, aux, _bounds);
    }

    var i: Int = bounds[0];
    var j: Int = bounds[1];
    var k: Int = bounds[0];

    for (k = k; i < bounds[1] && j < bounds[2]; k = k + 1)
    {
        if (*array[i] < *array[j])
        {
            *aux[k] = *array[i];
            i = i + 1;
        } else
        {
            *aux[k] = *array[j];
            j = j + 1;
        }
    }

    for (i = i; i < bounds[1]; i = i + 1) { *aux[k] = *array[i]; k = k + 1; }
    for (j = j; j < bounds[2]; j = j + 1) { *aux[k] = *array[j]; k = k + 1; }

    for (k = bounds[0]; k < bounds[2]; k = k + 1)
    {
        *array[k] = *aux[k];
    }

    print("Return to ", _ret, "\n");
}

var bounds: Int[3];
bounds[0] = 0;
bounds[1] = 8;
bounds[2] = 16;

merge(&array, &aux, bounds);
for (var i: Int = 0; i < 16; i = i + 1)
{
    print("array[", i, "] -> ", array[i], "\n");
}